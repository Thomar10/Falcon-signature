use rand_core::RngCore;
use randomness::random::RngBoth;
use stm32f4xx_hal::gpio;
use stm32f4xx_hal::gpio::{Output, PushPull};
use falcon::falcon::fpr;
use falcon::fft::{fft, poly_mul_fft};
use falcon::fpr::{fpr_add, fpr_of, fpr_sub};
use falcon::shake::{i_shake256_extract, i_shake256_flip, i_shake256_init, i_shake256_inject, InnerShake256Context};
use falcon_masked::fft_masked::{fft as fft_masked, poly_mul_fft as poly_mul_fft_masked};
use falcon_masked::fft_masked_deep::secure_fft;

type TriggerPin = gpio::PA12<Output<PushPull>>;

pub fn test_fft(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;
    let mut f: [fpr; N] = RAND_ARRAY;

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..f.len() {
            f[i] = rng.next_u64()
        }
    }

    let offset = read_buffer[1];

    if offset != 0 {
        for i in 0..f.len() {
            f[i] = fpr_add(f[i], fpr_of(offset as i64))
        }
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        fft(&mut f, LOGN);
        trigger.set_low();
    });

    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(f[0]));
    return return_buffer;
}

pub fn test_fft_masked(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;

    let mut f: [fpr; N] = RAND_ARRAY;

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..f.len() {
            f[i] = rng.next_u64()
        }
    }

    let offset = read_buffer[1];

    if offset != 0 {
        for i in 0..f.len() {
            f[i] = fpr_add(f[i], fpr_of(offset as i64))
        }
    }

    let mut f_masked: [[fpr; 2]; N] = [[0; 2]; N];

    for i in 0..f.len() {
        let rand_val: fpr = rng.next_u64();
        f_masked[i] = [fpr_sub(f[i], rand_val), rand_val];
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        fft_masked(&mut f_masked, LOGN);
        trigger.set_low();
    });

    let c: fpr = fpr_add(f_masked[0][0], f_masked[0][1]);
    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(c));
    return return_buffer;
}

pub fn test_secure_fft(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;

    let mut f: [fpr; N] = RAND_ARRAY;

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..f.len() {
            f[i] = rng.next_u64()
        }
    }

    let offset = read_buffer[1];

    if offset != 0 {
        for i in 0..f.len() {
            f[i] = fpr_add(f[i], fpr_of(offset as i64))
        }
    }

    let mut f_masked: [[fpr; 2]; N] = [[0; 2]; N];

    for i in 0..f.len() {
        let rand_val: fpr = rng.next_u64();
        f_masked[i] = [f[i] ^ rand_val, rand_val];
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        secure_fft(&mut f_masked, LOGN, rng);
        trigger.set_low();
    });

    let c: fpr = f_masked[0][0] ^ f_masked[0][1];
    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(c));
    return return_buffer;
}

pub fn test_poly_mul_fft(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;

    let mut f1: [fpr; N] = [0; N];
    let mut f2: [fpr; N] = [0; N];

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..N {
            f1[i] = rng.next_u64();
            f2[i] = rng.next_u64();
        }
    } else {
        let salt: [u8; 40] = [1; 40];
        let mut sc: InnerShake256Context = gen_rng(&salt);

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f1.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f2.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        poly_mul_fft(&mut f1, &f2, LOGN);
        trigger.set_low();
    });

    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(f1[0]));
    return return_buffer;
}

pub fn test_poly_mul_fft_masked(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;

    let mut f1: [fpr; N] = [0; N];
    let mut f2: [fpr; N] = [0; N];

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..N {
            f1[i] = rng.next_u64();
            f2[i] = rng.next_u64();
        }
    } else {
        let salt: [u8; 40] = [1; 40];
        let mut sc: InnerShake256Context = gen_rng(&salt);

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f1.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f2.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));
    }

    let mut f1_masked: [[fpr; 2]; N] = [[0; 2]; N];
    let mut f2_masked: [[fpr; 2]; N] = [[0; 2]; N];

    for i in 0..N {
        let rand_val: fpr = rng.next_u64();
        f1_masked[i] = [fpr_sub(f1[i], rand_val), rand_val];

        let rand_val: fpr = rng.next_u64();
        f2_masked[i] = [fpr_sub(f2[i], rand_val), rand_val];
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        poly_mul_fft_masked(&mut f1_masked, &f2_masked, LOGN);
        trigger.set_low();
    });

    let c: fpr = fpr_add(f1_masked[0][0], f1_masked[0][1]);

    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(c));
    return return_buffer;
}

/*pub fn test_secure_poly_mul_fft(trigger: &mut TriggerPin, read_buffer: &[u8], rng: &mut RngBoth) -> [u8; 8] {
    const LOGN: u32 = 9;
    const N: usize = 1 << LOGN;

    let mut f1: [fpr; N] = [0; N];
    let mut f2: [fpr; N] = [0; N];

    let is_random = read_buffer[0];

    if is_random != 0 {
        for i in 0..N {
            f1[i] = rng.next_u64();
            f2[i] = rng.next_u64();
        }
    } else {
        let salt: [u8; 40] = [1; 40];
        let mut sc: InnerShake256Context = gen_rng(&salt);

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f1.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));

        let mut out_buf: [u8; 8 * N] = [0; 8 * N];
        i_shake256_extract(&mut sc, &mut out_buf);
        f2.copy_from_slice(bytemuck::cast_slice::<u8, u64>(&out_buf));
    }

    let mut f1_masked: [[fpr; 2]; N] = [[0; 2]; N];
    let mut f2_masked: [[fpr; 2]; N] = [[0; 2]; N];

    for i in 0..N {
        let rand_val: fpr = rng.next_u64();
        f1_masked[i] = [f1[i] ^ rand_val, rand_val];

        let rand_val: fpr = rng.next_u64();
        f2_masked[i] = [f2[i] ^ rand_val, rand_val];
    }

    cortex_m::interrupt::free(|_| {
        trigger.set_high();
        secure_p
        poly_mul_fft_masked(&mut f1_masked, &f2_masked, LOGN);
        trigger.set_low();
    });

    let c: fpr = f1_masked[0][0] ^ f1_masked[0][1];

    let mut return_buffer: [u8; 8] = [0; 8];
    return_buffer.copy_from_slice(&u64::to_le_bytes(c));
    return return_buffer;
}*/

fn gen_rng(input: &[u8]) -> InnerShake256Context {
    let state: [u64; 25] = [0; 25];
    let dptr: u64 = 0;
    let mut sc_rust = InnerShake256Context { st: state, dptr};
    i_shake256_init(&mut sc_rust);
    i_shake256_inject(&mut sc_rust, &input);
    i_shake256_flip(&mut sc_rust);
    return sc_rust;
}
const RAND_ARRAY: [fpr; 512] = [4635610828423406220, 13862182991750095730, 13862964943787194523, 13850493100636257456, 4640152988420424316, 4624860457056754752, 13864242281416488608, 4639965697733147340, 13849025825259779432, 13862947998067200854, 13858969865355805834, 4634722255825505936, 13840573121548455104, 13863732494402062392, 13863396837618192336, 4627561363202268744, 4629952089474545692, 13863916344551091601, 4640238869877183574, 13832418395046777088, 4637813002978585200, 4640733571368972094, 4637200078218496952, 4635948471095335544, 13827498095186341120, 13859904619753451565, 13858542336048801246, 4635223824509802944, 4629949423720693756, 4639013291596983580, 4641055450717131538, 13848257903119367456, 4629616339037349024, 4635053072229830088, 4639952408642902588, 4641103941567217074, 4639365708481907844, 13863136447829165164, 4637226855255697500, 13858429872852703752, 13864079575732534701, 4639412057013847038, 4639725094568842508, 4634175244836724144, 4639927646673653488, 13859577516369333490, 4634768552039221944, 4632916318387432068, 4640619400325194388, 4638962756110109700, 4638674757146543756, 13851257146711815200, 13862439986779499208, 4640700202991585824, 4635614358595057880, 4640690594530773628, 4629452544798383672, 13863119436131837136, 4630207554971871268, 4626435052656528744, 4631995862084508992, 13860022929686072371, 4639204968359521472, 4634312940859730156, 13849791763765836208, 4638838844834062302, 4626423502034398496, 4624593267041580144, 4628211060915819496, 13861928289105935177, 13843205759435362624, 4636008234562886668, 13858042580977001252, 4634780351689007280, 4611176868906904576, 13859016383803928965, 4619991260819029312, 13863781847395975445, 13864174092833626092, 13861104341876243952, 4639475051638324302, 4628786324508807200, 13854044961319501076, 13863941888238383014, 13861341121290418858, 4630584978455556028, 4640483416724453350, 4633786104086222432, 13862138008994548036, 13858332289085331377, 13864079073249557848, 4632812661107335704, 4629198037067369624, 4640012857933357008, 13859804797575560121, 4630953484976096104, 13857709882138401028, 13862969406566198273, 4639224217460253724, 13850494909093935152, 13862837697758995982, 4636377839958296608, 4639270498300518652, 4637378481585898880, 13846918086989310752, 4634218328344360664, 4630789032833420944, 4630026376937906856, 4619595255413698816, 4631335718623025228, 13862629995394728708, 13846501621066913712, 13857504646927338864, 13855877207945731476, 4637646569383779288, 4639176871795745780, 13857425076502728088, 4640372763735952630, 13856946690231504776, 13852367729159231976, 4640126371764372206, 13861830261590874046, 4630407974224696028, 13860262297767141158, 13849043950884873080, 13852388743065180528, 13864334591028792551, 4639664564212320688, 4640901583866359394, 13859204944599798771, 13844379062671592464, 4635627996567755708, 4640369751938328124, 13864599211255620814, 13862737924771873348, 13860499268896985534, 4627375249296663224, 13856215199943276752, 4632458383788965240, 4621279972543523856, 4639360996811300394, 13859642442899900734, 13860018762635410696, 4632841062218417316, 13862018363098093984, 13863252650391528536, 13863672043170774392, 4634288019719317232, 4633771298393338928, 4621819641899256848, 4634751587220504308, 4624798682805426896, 13859787161047300215, 4640893374462852450, 4626300079813763672, 13864296273940565692, 13860721087551808296, 4634841873764136512, 13862679996903769870, 4638437057119906252, 4640809634804844768, 13863385009107705580, 13846945867978310304, 13862107614423517732, 13857349349516963112, 13853504591840957164, 13859473107596711908, 4631002212734586180, 4640162833489790560, 4624831273987771296, 13856560967962481376, 13858674808020536815, 4638265972545217320, 13851881169089149232, 4638183506594165020, 4636172146231422344, 4617391310937013888, 4638448550437031040, 13859249427466726058, 4634717868589900644, 13860929722216236184, 13853959643274817800, 4633793835455388080, 4638783013166506738, 13864104952794319514, 4625598003656662992, 4629419838039329448, 13857181383526184500, 13822986961188781056, 13863992181555890339, 13853214354464751712, 13860536552230099984, 4633784230623643744, 4629375822498442720, 13853737468710479624, 4637430094885362452, 4639767672760866550, 13860806888757185377, 13862549434834746889, 4641218889122653750, 13861703592687113602, 4633827271358248432, 13859250761301744190, 13863658046930685998, 4640371982236895646, 4634923746615180176, 4636213149534596244, 13857624906731390158, 4631354865178719728, 13859599379377804652, 4620257309494424800, 13857031026165989400, 4634794152038439608, 13861812658570018452, 4635567250028166096, 4637071452023212132, 13856974240516231036, 13862396777241798911, 4628254238191485544, 13859210736283906015, 13859745604678801584, 4640876278377115160, 13843876144500687424, 4637125090328431496, 13859969784153203821, 4634271293888021880, 4638897513011867940, 13849810119214223552, 13852440984863042208, 13859062790737850684, 4639889041592857512, 13862524343939622726, 13864488629572953370, 13844775258777470304, 4640529988536684808, 13857903711967521746, 13856038866361259588, 13862335842248557608, 4640140091577227208, 4639440496623828968, 13860380042953742121, 13864551059968056126, 13862799512362190208, 13860518148083865834, 13864476352748989798, 4632380814066309856, 13864143407435499654, 4598817621420560384, 13862211921542255886, 13860189445247875890, 13863354825881164923, 13864164104785660726, 13856300691173235336, 4638111179015127688, 4638724002119644728, 4625404871310027768, 13859926125097309471, 13863315979187375495, 13862992456483418136, 13852920718633448776, 4640960084374922624, 13856638731589097752, 4633585426692631216, 13861836761088589446, 4636254536655309352, 4638625973910852356, 13861386521617066171, 4640894078709906952, 13853870176422456848, 13855024661300094288, 4636577950028112276, 13857687356949207764, 13862548811524250530, 13863239159969988386, 13859685692006614502, 13848310948332186912, 4637283785093946780, 13862278553389344289, 4638925643998336912, 4635300928065111656, 13862345875759685598, 4639971062106721068, 4635534339490229752, 4640902300028319596, 4633976442728543280, 13858505231965071352, 4631018171088549328, 13863380076895509358, 13853565714233610848, 13861320826508057271, 13861951785204399458, 13864162627025597720, 4638729071613146412, 13863261741991089395, 13859387111125563590, 4635036616973148708, 13855309227888305000, 4639657713324723256, 4613768692629768192, 4623871494255430496, 4638401220418832432, 13862716783012410952, 4635395799564807936, 4630957083384375068, 4640474210807046000, 4638177851613597936, 4639037952603356262, 13863134002939845130, 13842358600912418304, 4639230855096778796, 4640179192170227600, 4629876474826656944, 4613139854336779200, 4623072553842102704, 4613611285824672640, 4635044198607725280, 13863292221038152236, 13858500497241622096, 4636181070641443400, 4633620867583862144, 13863272434400368080, 13863845978898547258, 13855005528333911412, 4639769967531719722, 4627173039876883096, 4632195860601643056, 4640307405190105100, 4630803970670968240, 13863765335592643895, 13849465533890780104, 13860318296777173558, 13864462130852044920, 13864040997626588345, 13858577178604296921, 13862701603250124692, 13858996365113751340, 13862511883383753670, 13855827054239732176, 13855633282302392824, 4633189481317617976, 13862630533202384167, 13862118034465964542, 4638200861938392832, 4640807017748448946, 4635155914872911624, 4641103523250919422, 13861463198143184740, 13826081077742113792, 13859037673070955865, 13856529437528946388, 13858533035479355621, 13862097439052841964, 4632672804563748640, 13857432852379441976, 4625827369259673200, 4639707249201592768, 4638721435668340996, 4638889361401711100, 13862441823129703798, 13849768870424525256, 13861511991175508002, 13864180525677068364, 4635295455358849768, 4634600245711270052, 13848993118704408056, 13863408937340743376, 4632975561276772328, 13851861517666590552, 13864315610679202680, 4634694316177412908, 13853362355848740412, 13852588266009630800, 4636075238951993880, 4636048441644433820, 13851762019031562208, 13864467875366764867, 4637724541495159952, 4639524519634460566, 13854991416761528836, 4641164956799955334, 4629986142161883104, 4628508403384123520, 13863659341819027301, 4639272681412960028, 4626802502470186072, 13864042839707238080, 13860911634002534621, 13860807089554297184, 4640105098318242484, 4640954090820930072, 4638353297689668080, 13863653638191103714, 13863456925437641530, 13858657143158815784, 4635382058125967868, 13857482967651350936, 4628576788582592544, 4640540419194384550, 4633688787345860128, 4639372645464345152, 4637176312579203596, 4636123086429686936, 4634320704320381476, 4628166091893105248, 4638977889455595366, 4634572511317109132, 4641101050750860546, 4631013197407454404, 4637610856333520176, 4633441497982659016, 4618526677034999904, 13856135338970493136, 4627099873175650624, 4639999333211544938, 13863105573078820198, 13860325668360539852, 13860613801475867277, 13863710447791291733, 4630748470965324868, 13859939471352223790, 13862081908052810464, 13845985553166868800, 4617199380944939104, 4637821328329113696, 4620792865013485104, 13850605038391962208, 4640211581321828466, 4633170426647774096, 13856513143482583136, 13864360057625234904, 4639867676702768178, 4640654363619881650, 13862599096406318014, 13861180209172053484, 13861517881337116765, 4634018235858488720, 4632217497054058756, 13856120669175684152, 13860636797059685915, 4637683559560716168, 4632508001272678640, 13862124766684310767, 13863647674017677976, 4626084893283917048, 4625622636286346000, 4634855448134618744, 4639767681287133660, 13858072988830059002, 13862549589314766304, 4612416122109067776, 4637009470859561312, 4639309134332397044, 4634286280258205752, 4630837861998994004, 4640877929518450738, 4639279775274901946, 4640786702666274100, 13858831219526310590, 4625531955602123648, 4624682715125621248, 4630701523530768116, 4616517582357215200, 4634670084994571108, 4640056823993606574, 4641037155193620216, 4630704446708564504, 13858360285876646265, 4633538959334809640, 4631314733222399156, 4639885772504511938, 13860941654120424871, 13857028035388992576, 4639993556314636856, 4637609438958957656, 4639618467362543390, 4640317822549664152, 13844826707447166064, 4623611551003764352, 4639945726176657666, 4627446051950294024, 13859577610629131121, 13853336371467832300, 13860808867628996246, 4640943747577020402, 13861172667649033402, 13857461601975702276, 4640578846320004062, 13859735148715107377, 13857800068504945734, 4640087055588991760, 4638185572400842820, 13862020181329770465, 13850921395786251056, 13851283430153667776, 4639815120606694762, 4619158750208102592, 4641132057044843668, 13862862514286083754, 4626543708599970192, 4630503646544647904, 4637875458473649108, 13862269884802830076, 13862728777921241798, 4632971062670093404, 13861291085048286352, 4624138167371657248, 13862793915854707923, 13864253359878003617, 4638915195877208122, 13856174811591779888, 13861134977123633315, 4634675438921520976];